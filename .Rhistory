readxl::read_excel("HW prescription data.xls")
pacman::p_load(tidyverse, forcats, pander)
panderOptions('round', 2)
panderOptions('keep.trailing.zeros', TRUE)
options(scipen = 10)
prescription_data <- readxl::read_excel("HW prescription data.xls"))
prescription_data <- readxl::read_excel("HW prescription data.xls")
prescription_data
prescription_data %>%
rename(n_x = times) %>%
invoke_rows(.f = rep, .collate = 'rows')
prescription_data %>%
rename(times = n_x) %>%
invoke_rows(.f = rep, .collate = 'rows')
prescription_data %>%
rename(times = n_x) %>%
invoke_rows(.f = rep, .collate = 'rows') %>%
select(count = .out) %>%
unlist()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.align = 'center', size = 'small')
fn_zip <- function(x, lambda, pi) {
p_x <- (lambda^x * exp(-lambda)) / factorial(x)
if(x == 0) {
return(pi + (1 - pi) * p_x)
} else {
return((1 - pi) * p_x)
}
}
# For Zero-inflated Negative Binomial Distribution, calculates P(X=x)
fn_zinbd <- function(x, r, alpha, pi) {
p_x <- (gamma(r + x) / (gamma(r) * factorial(x))) * (alpha / (alpha + 1))^r * (1 / (alpha + 1))^x
if(x == 0) {
return(pi + (1 - pi) * p_x)
} else {
return((1 - pi) * p_x)
}
}
# Calculates the log-likelihood of the NBD (including
# zero-inflated)
fn_max_ll <- function(par, zero_inflated = FALSE, counts) {
r <- par[1]
alpha <- par[2]
if (zero_inflated) {
pi <- par[3]
} else {
pi <- 0
}
ll <- sum(log(sapply(counts, fn_zinbd, r, alpha, pi)))
return(-ll)
}
counts <-
prescription_data %>%
rename(times = n_x) %>%
invoke_rows(.f = rep, .collate = 'rows') %>%
select(count = .out) %>%
unlist() %>%
unname()
params3 <- nlminb(c(1, 1), fn_max_ll, lower = c(0, 0), upper = c(Inf, Inf),
zero_inflated = FALSE, counts = counts)
params3
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.align = 'center', size = 'small')
pacman::p_load(tidyverse, forcats, pander)
panderOptions('round', 2)
panderOptions('keep.trailing.zeros', TRUE)
options(scipen = 10)
prescription_data <- readxl::read_excel("HW prescription data.xls")
prescription_data %>%
pander(caption = "Raw Prescription Data")
fn_zip <- function(x, lambda, pi) {
p_x <- (lambda^x * exp(-lambda)) / factorial(x)
if(x == 0) {
return(pi + (1 - pi) * p_x)
} else {
return((1 - pi) * p_x)
}
}
# For Zero-inflated Negative Binomial Distribution, calculates P(X=x)
fn_zinbd <- function(x, r, alpha, pi) {
p_x <- (gamma(r + x) / (gamma(r) * factorial(x))) * (alpha / (alpha + 1))^r * (1 / (alpha + 1))^x
if(x == 0) {
return(pi + (1 - pi) * p_x)
} else {
return((1 - pi) * p_x)
}
}
# Calculates the log-likelihood of the NBD (including
# zero-inflated)
fn_max_ll <- function(par, zero_inflated = FALSE, counts) {
r <- par[1]
alpha <- par[2]
if (zero_inflated) {
pi <- par[3]
} else {
pi <- 0
}
ll <- sum(log(sapply(counts, fn_zinbd, r, alpha, pi)))
return(-ll)
}
counts <-
prescription_data %>%
rename(times = n_x) %>%
invoke_rows(.f = rep, .collate = 'rows') %>%
select(count = .out) %>%
unlist() %>%
unname()
params_nbd <- nlminb(c(1, 1), fn_max_ll, lower = c(0, 0), upper = c(Inf, Inf),
zero_inflated = FALSE, counts = counts)
params_nbd
counts
sd(counts)
sum(counts == 0)
alpha = 1
f = (alpha / (alpha + 1))^(alpha * mean(counts)) - sum(counts == 0) / length(counts)
f
alpha = 1.5
f = (alpha / (alpha + 1))^(alpha * mean(counts)) - sum(counts == 0) / length(counts)
f
f = ((alpha / (alpha + 1))^(alpha * mean(counts)) - sum(counts == 0) / length(counts))^2
f
fn_means_and_zeros <- function(par, counts) {
alpha <- par[1]
f = ((alpha / (alpha + 1))^(alpha * mean(counts)) - sum(counts == 0) / length(counts))^2
}
alpha_maz <- nlminb(c(1), fn_means_and_zeros, lower = c(0), upper = c(Inf), counts = counts)
alpha_maz
params_nbd
(alpha / (alpha + 1))^(alpha * mean(counts)
alpha = .32
(alpha / (alpha + 1))^(alpha * mean(counts))
sum(counts == 0) / length(counts)
alpha_maz * mean(counts)
alpha_maz
fn_means_and_zeros <- function(par, counts) {
alpha <- par[1]
f = ((alpha / (alpha + 1))^(alpha * mean(counts)) - sum(counts == 0) / length(counts))^2
}
alpha_maz <- nlminb(c(1), fn_means_and_zeros, lower = c(0), upper = c(Inf), counts = counts)$par[1]
r_maz <- alpha_maz * mean(counts)
data_frame(
Method = c("MLE","Method of Moments", "Means and Zeros")
, alpha = c(params_nbd$par[1], alpha_mom, alpha_maz)
, r = c(params_nbd$par[2], r_mom, r_maz)
)
alpha_mom <- mean(counts) / (sd(counts)^2 + mean(counts))
r_mom <- alpha_mom * mean(counts)
fn_means_and_zeros <- function(par, counts) {
alpha <- par[1]
f = ((alpha / (alpha + 1))^(alpha * mean(counts)) - sum(counts == 0) / length(counts))^2
}
alpha_maz <- nlminb(c(1), fn_means_and_zeros, lower = c(0), upper = c(Inf), counts = counts)$par[1]
r_maz <- alpha_maz * mean(counts)
data_frame(
Method = c("MLE","Method of Moments", "Means and Zeros")
, alpha = c(params_nbd$par[1], alpha_mom, alpha_maz)
, r = c(params_nbd$par[2], r_mom, r_maz)
)
data_frame(
Method = c("MLE","Method of Moments", "Means and Zeros")
, alpha = c(params_nbd$par[1], alpha_mom, alpha_maz)
, r = c(params_nbd$par[2], r_mom, r_maz)
) %>%
pander(caption = c("NBD Model with Different Estimation Methods"))
data_frame(
Method = c("MLE","Method of Moments", "Means and Zeros")
, alpha = c(params_nbd$par[1], alpha_mom, alpha_maz)
, r = c(params_nbd$par[2], r_mom, r_maz)
)
alpha_mom <- mean(counts) / (sd(counts)^2 - mean(counts))
r_mom <- alpha_mom * mean(counts)
data_frame(
Method = c("MLE","Method of Moments", "Means and Zeros")
, alpha = c(params_nbd$par[1], alpha_mom, alpha_maz)
, r = c(params_nbd$par[2], r_mom, r_maz)
) %>%
pander(caption = c("NBD Model with Different Estimation Methods"))
data_frame(
Method = c("MLE","Method of Moments", "Means and Zeros")
, alpha = c(params_nbd$par[2], alpha_mom, alpha_maz)
, r = c(params_nbd$par[1], r_mom, r_maz)
) %>%
pander(caption = c("NBD Model with Different Estimation Methods"),
round = 4)
prescription_data
prescription_data %>%
mutate(
"MLE" = sapply(visits, fn_zinbd, params_nbd$par[2], params_nbd$par[1], 0) * sum(n_x)
)
prescription_data %>%
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[2], params_nbd$par[1], 0) * sum(n_x)
)
prescription_data %>%
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[2], params_nbd$par[1], 0) * sum(n_x)
, "Method of Moments" = sapply(x, fn_zinbd, r_mom, alpha_mom, 0) * sum(n_x)
, "Means and Zeros" = sapply(x, fn_zinbd, r_maz, alpha_maz, 0) * sum(n_x)
)
prescription_data %>%
select(Actual = n_x)
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
, "Method of Moments" = sapply(x, fn_zinbd, r_mom, alpha_mom, 0) * sum(Actual)
, "Means and Zeros" = sapply(x, fn_zinbd, r_maz, alpha_maz, 0) * sum(Actual)
)
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
, "Method of Moments" = sapply(x, fn_zinbd, r_mom, alpha_mom, 0) * sum(Actual)
, "Means and Zeros" = sapply(x, fn_zinbd, r_maz, alpha_maz, 0) * sum(Actual)
)
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
, "Method of Moments" = sapply(x, fn_zinbd, r_mom, alpha_mom, 0) * sum(Actual)
, "Means and Zeros" = sapply(x, fn_zinbd, r_maz, alpha_maz, 0) * sum(Actual)
) %>%
gather(method, value, -x)
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
, "Method of Moments" = sapply(x, fn_zinbd, r_mom, alpha_mom, 0) * sum(Actual)
, "Means and Zeros" = sapply(x, fn_zinbd, r_maz, alpha_maz, 0) * sum(Actual)
) %>%
gather(method, value, -x) %>%
mutate(method = factor(method, levels = c("Actual","MLE","Method of Moments","Means and Zeros"))) %>%
ggplot() +
geom_bar(data = . %>% filter(method == "Actual"), aes(x = x, y = value, fill = method)) +
geom_line(data = . %>% filter(method != "Actual"), aes(x = x, y = value, colour = method))
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
, "Method of Moments" = sapply(x, fn_zinbd, r_mom, alpha_mom, 0) * sum(Actual)
, "Means and Zeros" = sapply(x, fn_zinbd, r_maz, alpha_maz, 0) * sum(Actual)
) %>%
gather(method, value, -x) %>%
mutate(method = factor(method, levels = c("Actual","MLE","Method of Moments","Means and Zeros"))) %>%
ggplot() +
geom_bar(data = . %>% filter(method == "Actual"), aes(x = x, y = value, fill = method), stat = 'identity') +
geom_line(data = . %>% filter(method != "Actual"), aes(x = x, y = value, colour = method))
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
, "Method of Moments" = sapply(x, fn_zinbd, r_mom, alpha_mom, 0) * sum(Actual)
, "Means and Zeros" = sapply(x, fn_zinbd, r_maz, alpha_maz, 0) * sum(Actual)
) %>%
gather(method, value, -x) %>%
mutate(method = factor(method, levels = c("Actual","MLE","Method of Moments","Means and Zeros"))) %>%
ggplot() +
geom_bar(data = . %>% filter(method == "Actual"), aes(x = x, y = value), stat = 'identity') +
geom_line(data = . %>% filter(method != "Actual"), aes(x = x, y = value, colour = method))
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
, "Method of Moments" = sapply(x, fn_zinbd, r_mom, alpha_mom, 0) * sum(Actual)
, "Means and Zeros" = sapply(x, fn_zinbd, r_maz, alpha_maz, 0) * sum(Actual)
) %>%
gather(method, value, -x) %>%
mutate(method = factor(method, levels = c("Actual","MLE","Method of Moments","Means and Zeros"))) %>%
ggplot() +
geom_bar(aes(x = x, y = value), stat = 'identity')
#geom_line(data = . %>% filter(method != "Actual"), aes(x = x, y = value, colour = method))
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
, "Method of Moments" = sapply(x, fn_zinbd, r_mom, alpha_mom, 0) * sum(Actual)
, "Means and Zeros" = sapply(x, fn_zinbd, r_maz, alpha_maz, 0) * sum(Actual)
) %>%
gather(method, value, -x) %>%
mutate(method = factor(method, levels = c("Actual","MLE","Method of Moments","Means and Zeros"))) %>%
ggplot() +
geom_bar(aes(x = x, y = value, fill = method), stat = 'identity')
#geom_line(data = . %>% filter(method != "Actual"), aes(x = x, y = value, colour = method))
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
, "Method of Moments" = sapply(x, fn_zinbd, r_mom, alpha_mom, 0) * sum(Actual)
, "Means and Zeros" = sapply(x, fn_zinbd, r_maz, alpha_maz, 0) * sum(Actual)
) %>%
gather(method, value, -x) %>%
mutate(method = factor(method, levels = c("Actual","MLE","Method of Moments","Means and Zeros"))) %>%
ggplot() +
geom_bar(aes(x = x, y = value, fill = method), stat = 'identity', position = 'dodge')
#geom_line(data = . %>% filter(method != "Actual"), aes(x = x, y = value, colour = method))
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
, "Method of Moments" = sapply(x, fn_zinbd, r_mom, alpha_mom, 0) * sum(Actual)
, "Means and Zeros" = sapply(x, fn_zinbd, r_maz, alpha_maz, 0) * sum(Actual)
) %>%
gather(method, value, -x) %>%
mutate(method = factor(method, levels = c("Actual","MLE","Method of Moments","Means and Zeros"))) %>%
ggplot() +
geom_bar(aes(x = x, y = value, fill = method), stat = 'identity', position = 'dodge') +
labs(y = "Count", x = "Number of Prescriptions", fill = "") +
?scales::pretty_breaks
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
"MLE" = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
, "Method of Moments" = sapply(x, fn_zinbd, r_mom, alpha_mom, 0) * sum(Actual)
, "Means and Zeros" = sapply(x, fn_zinbd, r_maz, alpha_maz, 0) * sum(Actual)
) %>%
gather(method, value, -x) %>%
mutate(method = factor(method, levels = c("Actual","MLE","Method of Moments","Means and Zeros"))) %>%
ggplot() +
geom_bar(aes(x = x, y = value, fill = method), stat = 'identity', position = 'dodge') +
labs(y = "Count", x = "Number of Prescriptions", fill = "", title = "Comparison of Estimation Methods") +
scale_x_continuous(labels = scales::pretty_breaks()) +
scale_y_continuous(labels = scales::comma)
params_zinbd <- nlminb(c(1, 1, .5), fn_max_ll, lower = c(0, 0, 0), upper = c(Inf, Inf, 1),
zero_inflated = TRUE, counts = counts)
params_zinbd
data_frame(
Method = c("NBD", "Zero-Inflated NBD")
, alpha = c(params_nbd$par[2], params_zinbd$par[2])
, r = c(params_nbd$par[1], params_zinbd$par[1])
, pi = c(NA, params_zinbd$par[3])
) %>%
pander(caption = c("MLE for NBD and Zero-Inflated NBD"),
round = 4, missing = "")
rename(Actual = n_x) %>%
mutate(
Expected = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
)
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
Expected = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
)
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
Expected = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
, chi.squared = (Actual - Expected)^2 / Expected
)
params_nbd
params_nbd$par
fn_max_ll(params_nbd$par, zero_inflated = FALSE, counts)
lrt_test_stat <- 2 * (ll_zi - ll)
pchisq(lrt_test_stat, df = 1, lower.tail = FALSE)
ll <- fn_max_ll(params_nbd$par, zero_inflated = FALSE, counts)
ll_zi <- fn_max_ll(params_zinbd$par, zero_inflated = TRUE, counts)
lrt_test_stat <- 2 * (ll_zi - ll)
pchisq(lrt_test_stat, df = 1, lower.tail = FALSE)
ll <- fn_max_ll(params_nbd$par, zero_inflated = FALSE, counts)
ll_zi <- fn_max_ll(params_zinbd$par, zero_inflated = TRUE, counts)
lrt_stat <- 2 * (ll_zi - ll)
pchisq(lrt_stat, df = 1, lower.tail = FALSE)
ll
ll_zi
lrt_stat
ll <- fn_max_ll(params_nbd$par, zero_inflated = FALSE, counts)
ll_zi <- fn_max_ll(params_zinbd$par, zero_inflated = TRUE, counts)
lrt_stat <- 2 * (ll_zi - ll)
pchisq(lrt_stat, df = 1, lower.tail = FALSE)
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
Expected = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
)
fn_nbd_recursive <- function(x, r, alpha, t) {
if (x == 0) {
p_x <- (alpha / (alpha + t))^r
} else {
p_x <- (t * (r+x-1)) / (x * (alpha + t)) * fn_nbd_recursive(x - 1, r, alpha, t)
}
return(p_x)
}
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
Expected = sapply(x, fn_nbd_recursive, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
)
fn_nbd_recursive
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
Expected = sapply(x, fn_nbd_recursive, params_nbd$par[1], params_nbd$par[2], 0) * sum(Actual)
)
fn_nbd_recursive(0, params_nbd$par[1], params_nbd$par[2], 0)
fn_nbd_recursive(2, params_nbd$par[1], params_nbd$par[2], 0)
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
Expected = sapply(x, fn_nbd_recursive, params_nbd$par[1], params_nbd$par[2], 12) * sum(Actual)
)
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
p_x = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0)
, Expected = p_x * sum(Actual)
)
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
p_x = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0)
, Expected = p_x * sum(Actual)
) %>%
mutate(
x_factor = if_else(x < 10, as.character(x), "10+")
, x_factor = factor(x_factor, levels = c(as.character(0:9), "10+"))
)
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
p_x = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0)
, Expected = p_x * sum(Actual)
) %>%
mutate(
x_factor = if_else(x < 10, as.character(x), "10+")
, x_factor = factor(x_factor, levels = c(as.character(0:9), "10+"))
, p_x2 = if_else(x < 10, p_x, 1 - sum(p_x))
)
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
p_x = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0)
, Expected = p_x * sum(Actual)
) %>%
mutate(
x_factor = if_else(x < 10, as.character(x), "10+")
, x_factor = factor(x_factor, levels = c(as.character(0:9), "10+"))
, p_x2 = if_else(x < 10, p_x, 0)
, p_x3 = if_else(x < 10, p_x, 1 - sum(p_x2))
)
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
p_x = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0)
) %>%
mutate(
x_factor = if_else(x < 10, as.character(x), "10+")
, x_factor = factor(x_factor, levels = c(as.character(0:9), "10+"))
, p_x2 = if_else(x < 10, p_x, 0)
, p_x3 = if_else(x < 10, p_x, 1 - sum(p_x2))
, Expected = p_x3 * sum(Actual)
) %>%
group_by(x_factor, Expected) %>%
summarise(Actual = sum(Actual))
3/1
3/11
pchisq(sum(summary_nbd$chi.squared), df = 9, lower.tail = FALSE)
summary_nbd <-
prescription_data %>%
rename(Actual = n_x) %>%
mutate(
p_x = sapply(x, fn_zinbd, params_nbd$par[1], params_nbd$par[2], 0)
) %>%
mutate(
x_factor = if_else(x < 10, as.character(x), "10+")
, x_factor = factor(x_factor, levels = c(as.character(0:9), "10+"))
, p_x2 = if_else(x < 10, p_x, 0)
, p_x3 = if_else(x < 10, p_x, 1 - sum(p_x2))
, Expected = p_x3 * sum(Actual)
) %>%
group_by(x_factor, Expected) %>%
summarise(Actual = sum(Actual)) %>%
mutate(chi.squared = (Actual - Expected)^2 / Expected) %>%
select(x = x_factor, Actual, Expected, chi.squared)
summary_nbd %>%
pander(caption = "")
pchisq(sum(summary_nbd$chi.squared), df = 9, lower.tail = FALSE)
